// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  businessName  String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role         UserRole    @default(USER)
  password      String?
  accessToken   String?


  profile    Profile?
  services   Service[]
  categories Category[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Account   Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Category {
  id              String    @id @default(cuid())
  name            String
  image           String
  displayCategory Boolean
  services        Service[]

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Service {
  id          String @id @default(cuid())
  name        String
  description String
  price       String
  image       String
  userId      String
  categoryId  String

  availability Boolean
  featured     Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  User     User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Profile {
  id        String  @id @default(cuid())
  name      String
  bio       String
  image     String
  about     String?
  instagram String?
  twitter   String?
  facebook  String?
  userId    String  @unique

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
